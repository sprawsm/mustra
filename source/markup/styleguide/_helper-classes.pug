section.styleguide-section#s-helper-classes
  +sectionHeading("Helper classes")

  .row
    .col-sm-8

      h2.h3 Clearfix
      p The <code>.clearfix</code> class is a standard one you might have seen before. Add it to a parent or import it into another class in order to clear the parent element of floats.

      h2.h3 Content visibility
      p You can control element's visibility using the following classes:
      ul
        li <code>.no-show</code> which positions the element outside the viewport with absolute positioning, but doesn't apply <code>display: none</code> to it.
        li <code>.hidden</code> hides the element with <code>display: none</code>.
        li <code>.fade</code> coupled with <code>.in</code> hides and shows an element using the <code>opacity</code> property (has a transition effect by default as well).

      h2.h3 Display
      p You can force an element's display with literal classes <code>.display-block</code>, <code>.display-inline-block</code>, and <code>.display-inline</code>.

      h2.h3 Floats
      p Mustra uses the following classes to horizontally align elements using floats: <code>.left</code>, <code>.right</code>.
      p The <code>.center</code> class is used to center a block-level element horizontally, although it requires that the element has a set width.

      h2.h3 Responsive figures
      p In order to prevent figures like images and objects overflow their containers, apply one of the following classes: <code>.contain</code>, or <code>img-responsive</code>.
      p Both classes do the same thing, the first one is specific to Mustra, while the latter is following Bootstrap's convention.

      h2.h3 Responsive videos
      p In order to maintain aspect ratio of embedded videos, apply <code>.video-aspect-ratio</code> to its container.

      figure.video-aspect-ratio
        iframe(width="560", height="315", src="https://www.youtube.com/embed/9NJcNcW1xH4", frameborder="0", allowfullscreen)

      h2.h3 Margins
      p Mustra supplies you with necessary spacing classes your can use to preserve consistency in your UIs.
      p The basic formula is: <code>.m[direction]-[size]</code> where the direction can be <code>l</code> (left), <code>t</code> (top), <code>r</code> (right), or <code>b</code> (bottom), and sizes are: <code>xs</code>, <code>sm</code>, <code>base</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, and <code>type</code>.
      p The specific sizing suffix <code>type</code> uses the typographic <code>em</code> value for size (<code>1em</code> by default) and is meant to be used when you e.g. want to insert a custom UI element within longform text, but you want to keep the flow natural.
      p.quiet.text-sm It's important to note that these classes should not be imported into other classes, as they have the <code>!important</code> flag. They are meant to be used to overcome defaults on a case-by-case basis. In order to keep spacing consistent throughout your UI you should rely on the default spacing variables, and expand from there if you need to.

    .col-sm-4
      .styleguide-content
        p These are the helper classes available in Mustra by default. They are extremely useful for fine-grained control of your UI, and when writing a special class isn't possible or optimal.
